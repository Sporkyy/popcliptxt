// #popclip
// name: Good File Name
// icon: circle filled GFN
// language: javascript

// MARK: Constants

// MM\DD\YYYY or MM/DD/YYYY or MM-DD-YYYY or MM.DD.YYYY
// MM or DD can be 1 or 2 digits
const re_numerical_date = new RegExp(
  /\b(?:\d{1,2}|\d{4})[\\\/\.-](\d{1,2})[\\\/\.-](\d{1,2}|\d{4})\b/g,
);

const to_bracketize = [
  [/\b(\d{3,4})p\b/gi, '$1p'],
  [/\bBlue?-?Ray\b/gi, 'BluRay'],
  [/\bBR\b/gi, 'BR'],
  [/\bBR-?Rip\b/gi, 'BRRip'],
  [/\bDVD\b/gi, 'DVD'],
  [/\bDVD-?Rip\b/gi, 'DVDRip'],
  [/\bHD\b/gi, 'HD'],
  [/\bHD-?Rip\b/gi, 'HDRip'],
  [/\bHDTV\b/gi, 'HDTV'],
  [/\bWEB\b/gi, 'WEB'],
  [/\bWEB-?DL\b/gi, 'WEBDL'],
  [/\bWEB-?R\b/gi, 'WEBR'],
  [/\bWEB-?Rip\b/gi, 'WEBRip'],
  [/\bRemux\b/gi, 'Remux'],
  [/\bVHS\b/gi, 'VHS'],
];

const to_standardize = [
  [/–/g, '-'], // EN DASH
  [/︲/g, '-'], // PRESENTATION FORM FOR VERTICAL EN DASH
  [/—/g, '-'], // EM DASH
  [/︱/g, '-'], // PRESENTATION FORM FOR VERTICAL EM DASH
  [/﹘/g, '-'], // SMALL EM DASH
  [/⸺/g, '-'], // TWO-EM DASH
  [/⸻/g, '-'], // THREE-EM DASH
  [/―/g, '-'], // HORIZONTAL BAR
  [/﹣/g, '-'], // SMALL HYPHEN-MINUS
  [/－/g, '-'], // FULLWIDTH HYPHEN-MINUS
  [/\bS(\d{1,2})E(\d{1,2})\b/gi, 's$1e$2'], // Smart colon to hyphen
  [/(\S)\b:(\s)/g, ''], // Remove all other colons
  [/:+/g, ''], // Remove leading periods
  [/^\.*(.+?)/g, '$1'], // Remove trailing periods
  [/[\/\\]/g, ' '], // All slashes to spaces
  [/[\(\[]]\s*/g, ' ('], // Brackets have a space before
  [/\s*[\)\]]/g, ') '], // Brackets have a space after
  [/\]\s+\[/g, ']['], // Subsequentsquare brackets
  [/|/g, '-'], // PIPE (This just someone being cute)
  // ⬇️ This should probably always be penultimate
  [/[:\\\/]/g, '_'], // Remove illegal/unwanted characters
  // ⬇️ This should probably always be ultiate
  [/\s+/g, ' '], // Normalize all whitespace to one space
];

// MARK: Functions

function strToISO8601(date) {
  const d = new Date(date);
  return d.toISOString().split('T')[0];
}

// MARK: Main

let fn = popclip.input.text;

// Make all dates ISO8601
fn = fn.replace(re_numerical_date, strToISO8601);

// Bracketize certain strings
for (const [re, replacement] of to_bracketize) {
  fn = fn.replace(re, `(${replacement})`);
}

// Standardize certain strings
for (const [re, replacement] of to_standardize) {
  fn = fn.replace(re, replacement);
}

// No leading or trailing whitespace
fn = fn.trim();

popclip.copyText(fn);
