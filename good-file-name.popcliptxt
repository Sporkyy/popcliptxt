// #popclip
// name: Good File Name
// icon: circle filled GFN
// language: javascript

// MARK: Constants

// MM\DD\YYYY or MM/DD/YYYY or MM-DD-YYYY or MM.DD.YYYY
// MM or DD can be 1 or 2 digits
const re_numerical_date = new RegExp(
  /\b(?:\d{1,2}|\d{4})[\\\/\.-](\d{1,2})[\\\/\.-](\d{1,2}|\d{4})\b/gi,
);

// const to_bracketize = [
//   [/\b(\d{3,4})p\b/gi, '$1p'],
//   [/\bBlue?-?Ray\b/gi, 'BluRay'],
//   [/\bBR\b/gi, 'BR'],
//   [/\bBR-?Rip\b/gi, 'BRRip'],
//   [/\bDVD\b/gi, 'DVD'],
//   [/\bDVD-?Rip\b/gi, 'DVDRip'],
//   [/\bHD\b/gi, 'HD'],
//   [/\bHD-?Rip\b/gi, 'HDRip'],
//   [/\bHDTV\b/gi, 'HDTV'],
//   [/\bWEB\b/gi, 'WEB'],
//   [/\bWEB-?DL\b/gi, 'WEBDL'],
//   [/\bWEB-?R\b/gi, 'WEBR'],
//   [/\bWEB-?Rip\b/gi, 'WEBRip'],
//   [/\bRemux\b/gi, 'Remux'],
//   [/\bVHS\b/gi, 'VHS'],
// ];

const to_standardize = [
  // Hyphens
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  [/–/gi, '-'], // EN DASH
  [/︲/gi, '-'], // PRESENTATION FORM FOR VERTICAL EN DASH
  [/—/gi, '-'], // EM DASH
  [/︱/gi, '-'], // PRESENTATION FORM FOR VERTICAL EM DASH
  [/﹘/gi, '-'], // SMALL EM DASH
  [/⸺/gi, '-'], // TWO-EM DASH
  [/⸻/gi, '-'], // THREE-EM DASH
  [/―/gi, '-'], // HORIZONTAL BAR
  [/﹣/gi, '-'], // SMALL HYPHEN-MINUS
  [/－/gi, '-'], // FULLWIDTH HYPHEN-MINUS
  [/\|/g, '-'], // PIPE (This just someone being cute)
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // Periods
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  [/^\.+(.+?)/gi, '$1'], // Remove leading periods
  [/(.+?)\.+$/gi, '$1'], // Remove trailing periods
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // Colons
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  [/:/gi, ''], // Remove all other colons
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // Parenthes/Brackets
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  [/[\(\[]\s*/gi, ' ('], // Standardize opening
  [/\s*[\)\]]/gi, ') '], // Standardize closing
  // This makes sense from an *arr media perspective
  // But it's not general as the rests of what I'm going for
  // [/\]\s+\[/g, ']['], // Squeeze spaces from bracketed text
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  [/\bS(\d{1,2})E(\d{1,2})\b/gi, 's$1e$2'], // Season+Episode
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // ⬇️ This should probably always be penultimate
  // Underscores are changed to spaces by Jdownloader2, thus spaces
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  [/[:\\\/]/gi, ' '], // Remove all other slahes+colons
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  // ⬇️ This should probably always be ultiate
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  [/\s+/gi, ' '], // Normalize all whitespace to one space
  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
];

// MARK: Functions

function strToISO8601(date) {
  const objDate = new Date(date);
  let strDate = date;
  try {
    strDate = objDate.toISOString().split('T')[0];
  } catch (e) {
    // Do nothing
  }
  return strDate;
}

// MARK: Main

let fn = popclip.input.text;

// Make all dates ISO8601
fn = fn.replace(re_numerical_date, strToISO8601);

// Bracketize certain strings
// for (const [re, replacement] of to_bracketize) {
//   fn = fn.replace(re, `[${replacement}]`);
// }

// Standardize certain strings
for (const [re, replacement] of to_standardize) {
  fn = fn.replace(re, replacement);
}

// Remove any leading and trailing whitespace
fn = fn.trim();

popclip.copyText(fn);
